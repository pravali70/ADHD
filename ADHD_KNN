{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3p8K7HpST2m9",
        "outputId": "e75cd164-9b9c-4b66-cb7e-6013383b5ec4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['ADHD_part2/v177.mat', 'ADHD_part2/v215.mat', 'ADHD_part2/v200.mat', 'ADHD_part2/v213.mat', 'ADHD_part2/v206.mat', 'ADHD_part2/v204.mat', 'ADHD_part2/v238.mat', 'ADHD_part2/v198.mat', 'ADHD_part2/v263.mat', 'ADHD_part2/v288.mat', 'ADHD_part2/v274.mat', 'ADHD_part2/v270.mat', 'ADHD_part2/v265.mat', 'ADHD_part2/v254.mat', 'ADHD_part2/v286.mat', 'ADHD_part2/v279.mat', 'ADHD_part2/v250.mat', 'ADHD_part2/v244.mat', 'ADHD_part2/v246.mat', 'ADHD_part2/v284.mat', 'ADHD_part2/v181.mat', 'ADHD_part2/v234.mat', 'ADHD_part2/v209.mat', 'ADHD_part2/v196.mat', 'ADHD_part2/v236.mat', 'ADHD_part2/v183.mat', 'ADHD_part2/v227.mat', 'ADHD_part2/v179.mat', 'ADHD_part2/v190.mat', 'ADHD_part2/v231.mat', 'ADHD_part2/v219.mat']\n",
            "<bound method NDFrame.head of             0      1      2      3      4      5      6      7      8      9  \\\n",
            "0        85.0  -19.0  163.0   85.0  347.0   16.0  457.0  310.0  568.0  310.0   \n",
            "1       121.0  -55.0  273.0  156.0  384.0   52.0  641.0  420.0  678.0  494.0   \n",
            "2       191.0   85.0  347.0  297.0  384.0  236.0  678.0  568.0  715.0  568.0   \n",
            "3       261.0   85.0  347.0  261.0  420.0  384.0  862.0  531.0  899.0  494.0   \n",
            "4       191.0  156.0  310.0  367.0  310.0  568.0  788.0  531.0  678.0  494.0   \n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
            "586780  226.0  367.0  273.0  402.0  457.0  -57.0  457.0   52.0  347.0   16.0   \n",
            "586781   50.0  332.0   89.0  191.0   89.0  -57.0  163.0   52.0  163.0   52.0   \n",
            "586782  121.0   85.0   89.0  -55.0  -94.0  126.0   16.0  310.0  200.0  236.0   \n",
            "586783   85.0 -125.0   16.0 -231.0 -204.0  310.0  -20.0  457.0   89.0  273.0   \n",
            "586784   15.0 -125.0  -20.0 -125.0  -57.0  273.0   16.0  420.0  163.0  273.0   \n",
            "\n",
            "           10     11     12     13     14     15     16     17     18  class  \n",
            "0       163.0   16.0  384.0  200.0  457.0  163.0   85.0  121.0  332.0      1  \n",
            "1        89.0   52.0  273.0  273.0  420.0  200.0  121.0  156.0  367.0      1  \n",
            "2       126.0   89.0  273.0  310.0  494.0  200.0  191.0  297.0  473.0      1  \n",
            "3       200.0   16.0  310.0  310.0  568.0   89.0  261.0  261.0  578.0      1  \n",
            "4        89.0  126.0  273.0  457.0  420.0  163.0  261.0  297.0  437.0      1  \n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  \n",
            "586780   16.0  531.0  273.0  163.0  347.0  163.0  402.0   15.0  332.0      1  \n",
            "586781  -57.0  273.0   16.0   52.0  163.0   16.0  226.0   85.0  261.0      1  \n",
            "586782   89.0  -94.0   16.0  163.0  273.0   52.0   85.0  226.0  332.0      1  \n",
            "586783   89.0 -241.0  -57.0  273.0  126.0  126.0 -195.0  156.0  226.0      1  \n",
            "586784   52.0  -57.0  126.0  384.0   89.0  310.0  -19.0   50.0  261.0      1  \n",
            "\n",
            "[586785 rows x 20 columns]>\n"
          ]
        }
      ],
      "source": [
        "from mat4py import loadmat\n",
        "import pandas as pd\n",
        "import glob\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "folder_name_adhd = [\"ADHD_part1/\", \"ADHD_part2/\"]\n",
        "\n",
        "# Creating .mat files list \n",
        "matfiles_adhd = []\n",
        "for folder in folder_name_adhd:\n",
        "    for file in glob.glob(folder+\"*.mat\"):\n",
        "        matfiles_adhd.append(file)\n",
        "print((matfiles_adhd))\n",
        "\n",
        "# Reading data from .mat file and creating list of row and appending from every file\n",
        "signalData = []\n",
        "for file in matfiles_adhd:\n",
        "    column_name = file.split('/')[-1].split('.')[0]\n",
        "    tepmdata = loadmat(file)\n",
        "    data_ = tepmdata[column_name]\n",
        "    for item in data_:\n",
        "        signalData.append(item)\n",
        "\n",
        "# Creating a dataframe from the list \n",
        "adhd_data_df = pd.DataFrame(signalData)\n",
        "adhd_data_df['class'] = 1\n",
        "print(adhd_data_df.head)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HnXcqW1OUQKb",
        "outputId": "af181e67-0269-4854-a6eb-4cf8942fe6ce"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "60\n",
            "<bound method NDFrame.head of             0      1      2      3      4      5      6      7      8      9  \\\n",
            "0        85.0  156.0  -20.0  121.0   52.0  347.0  200.0  236.0  126.0 -315.0   \n",
            "1        15.0  156.0  -20.0   85.0  -20.0   52.0 -167.0  -20.0  -94.0  126.0   \n",
            "2       297.0  226.0  347.0  191.0  273.0  200.0  163.0   89.0  200.0   52.0   \n",
            "3       191.0   85.0  126.0   85.0  -57.0   52.0 -131.0   16.0  -57.0  126.0   \n",
            "4        85.0   85.0   52.0  156.0 -131.0  163.0 -204.0  200.0   89.0  310.0   \n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
            "959309  261.0  191.0  236.0  191.0  200.0  200.0  200.0  126.0  236.0   52.0   \n",
            "959310  261.0  -19.0  236.0  226.0  200.0  163.0  236.0   89.0  236.0   52.0   \n",
            "959311  191.0   15.0  163.0  261.0  163.0  200.0  236.0  126.0  236.0   89.0   \n",
            "959312  261.0  191.0  236.0  226.0  273.0  200.0  236.0   89.0  273.0   89.0   \n",
            "959313   85.0  191.0  126.0  156.0  163.0  126.0  200.0  126.0  163.0  126.0   \n",
            "\n",
            "           10     11     12     13     14     15     16     17     18  class  \n",
            "0       163.0 -425.0  -20.0   89.0   16.0   52.0   50.0  156.0  121.0      0  \n",
            "1       -20.0  163.0  -57.0   89.0  -57.0  126.0   15.0  860.0 -125.0      0  \n",
            "2       384.0  200.0  273.0  163.0  273.0  236.0  226.0 -583.0  121.0      0  \n",
            "3       -20.0   16.0  -57.0   89.0 -131.0  126.0 -160.0  895.0 -160.0      0  \n",
            "4       163.0  126.0   52.0  163.0  163.0  200.0  226.0   50.0  121.0      0  \n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  \n",
            "959309  384.0   89.0  310.0  236.0  347.0  200.0  332.0  261.0  156.0      0  \n",
            "959310  236.0   16.0  273.0  200.0  347.0  273.0  226.0  261.0  121.0      0  \n",
            "959311  163.0  -20.0  273.0  236.0  347.0  273.0  261.0  297.0  121.0      0  \n",
            "959312  200.0  -57.0  347.0  163.0  420.0  200.0  226.0  226.0  156.0      0  \n",
            "959313  126.0   52.0  200.0  200.0  310.0  200.0  121.0  191.0   50.0      0  \n",
            "\n",
            "[959314 rows x 20 columns]>\n"
          ]
        }
      ],
      "source": [
        "###### For Control Data\n",
        "folder_name_control = [\"Control_part1/\", \"Control_part2/\"]\n",
        "\n",
        "# Creating .mat files list \n",
        "matfiles_control = []\n",
        "for folder in folder_name_control:\n",
        "    for file in glob.glob(folder+\"*.mat\"):\n",
        "        matfiles_control.append(file)\n",
        "print(len(matfiles_control))\n",
        "\n",
        "# Reading data from .mat file and creating list of row and appending from every file\n",
        "signalData = []\n",
        "for file in matfiles_control:\n",
        "    column_name = file.split('/')[-1].split('.')[0]\n",
        "    tepmdata = loadmat(file)\n",
        "    data_ = tepmdata[column_name]\n",
        "    for item in data_:\n",
        "        signalData.append(item)\n",
        "        \n",
        "# Creating a dataframe from the list \n",
        "control_data_df = pd.DataFrame(signalData)\n",
        "control_data_df['class'] = 0\n",
        "print(control_data_df.head)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "id": "36dlkM2rWmgQ"
      },
      "outputs": [],
      "source": [
        "column_name = ['Fz', 'F7', 'F8', 'Fp1', 'Fp2', 'Cz', 'T3', 'C4', 'T4', 'F3', 'T6', 'O1', 'F4', 'P3', 'Pz', 'C3', 'P4', 'T5', 'O2', \"class\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SY8liEszXJ_L",
        "outputId": "586e8ede-2610-4d43-9c14-c022cc983e1b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<bound method NDFrame.head of            Fz     F7     F8    Fp1    Fp2     Cz     T3     C4     T4     F3  \\\n",
            "0        85.0  -19.0  163.0   85.0  347.0   16.0  457.0  310.0  568.0  310.0   \n",
            "1       121.0  -55.0  273.0  156.0  384.0   52.0  641.0  420.0  678.0  494.0   \n",
            "2       191.0   85.0  347.0  297.0  384.0  236.0  678.0  568.0  715.0  568.0   \n",
            "3       261.0   85.0  347.0  261.0  420.0  384.0  862.0  531.0  899.0  494.0   \n",
            "4       191.0  156.0  310.0  367.0  310.0  568.0  788.0  531.0  678.0  494.0   \n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
            "959309  261.0  191.0  236.0  191.0  200.0  200.0  200.0  126.0  236.0   52.0   \n",
            "959310  261.0  -19.0  236.0  226.0  200.0  163.0  236.0   89.0  236.0   52.0   \n",
            "959311  191.0   15.0  163.0  261.0  163.0  200.0  236.0  126.0  236.0   89.0   \n",
            "959312  261.0  191.0  236.0  226.0  273.0  200.0  236.0   89.0  273.0   89.0   \n",
            "959313   85.0  191.0  126.0  156.0  163.0  126.0  200.0  126.0  163.0  126.0   \n",
            "\n",
            "           T6     O1     F4     P3     Pz     C3     P4     T5     O2  class  \n",
            "0       163.0   16.0  384.0  200.0  457.0  163.0   85.0  121.0  332.0      1  \n",
            "1        89.0   52.0  273.0  273.0  420.0  200.0  121.0  156.0  367.0      1  \n",
            "2       126.0   89.0  273.0  310.0  494.0  200.0  191.0  297.0  473.0      1  \n",
            "3       200.0   16.0  310.0  310.0  568.0   89.0  261.0  261.0  578.0      1  \n",
            "4        89.0  126.0  273.0  457.0  420.0  163.0  261.0  297.0  437.0      1  \n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  \n",
            "959309  384.0   89.0  310.0  236.0  347.0  200.0  332.0  261.0  156.0      0  \n",
            "959310  236.0   16.0  273.0  200.0  347.0  273.0  226.0  261.0  121.0      0  \n",
            "959311  163.0  -20.0  273.0  236.0  347.0  273.0  261.0  297.0  121.0      0  \n",
            "959312  200.0  -57.0  347.0  163.0  420.0  200.0  226.0  226.0  156.0      0  \n",
            "959313  126.0   52.0  200.0  200.0  310.0  200.0  121.0  191.0   50.0      0  \n",
            "\n",
            "[1546099 rows x 20 columns]>\n"
          ]
        }
      ],
      "source": [
        "final_df = pd.concat([adhd_data_df, control_data_df], axis=0)\n",
        "final_df.columns = column_name\n",
        "print(final_df.head)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0FtftHhFI-29",
        "outputId": "687ec050-3b87-4f8b-870d-b50c73868329"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "          Fp2     F4     F8     C4     T4     P4     T6     O2\n",
            "0       347.0  384.0  163.0  310.0  568.0   85.0  163.0  332.0\n",
            "1       384.0  273.0  273.0  420.0  678.0  121.0   89.0  367.0\n",
            "2       384.0  273.0  347.0  568.0  715.0  191.0  126.0  473.0\n",
            "3       420.0  310.0  347.0  531.0  899.0  261.0  200.0  578.0\n",
            "4       310.0  273.0  310.0  531.0  678.0  261.0   89.0  437.0\n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...\n",
            "959309  200.0  310.0  236.0  126.0  236.0  332.0  384.0  156.0\n",
            "959310  200.0  273.0  236.0   89.0  236.0  226.0  236.0  121.0\n",
            "959311  163.0  273.0  163.0  126.0  236.0  261.0  163.0  121.0\n",
            "959312  273.0  347.0  236.0   89.0  273.0  226.0  200.0  156.0\n",
            "959313  163.0  200.0  126.0  126.0  163.0  121.0  126.0   50.0\n",
            "\n",
            "[1546099 rows x 8 columns]\n"
          ]
        }
      ],
      "source": [
        "# Region Sepration - Right brain\n",
        "right_brain_df = final_df[['Fp2','F4','F8', 'C4','T4', 'P4','T6','O2']]\n",
        "print(right_brain_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y8NrVFMhQPqD",
        "outputId": "7cd95f4f-5485-476d-95fe-3a07f7740de4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "           C3     T3    Fp1     F3     F7     P3     T5     O1\n",
            "0       163.0  457.0   85.0  310.0  -19.0  200.0  121.0   16.0\n",
            "1       200.0  641.0  156.0  494.0  -55.0  273.0  156.0   52.0\n",
            "2       200.0  678.0  297.0  568.0   85.0  310.0  297.0   89.0\n",
            "3        89.0  862.0  261.0  494.0   85.0  310.0  261.0   16.0\n",
            "4       163.0  788.0  367.0  494.0  156.0  457.0  297.0  126.0\n",
            "...       ...    ...    ...    ...    ...    ...    ...    ...\n",
            "959309  200.0  200.0  191.0   52.0  191.0  236.0  261.0   89.0\n",
            "959310  273.0  236.0  226.0   52.0  -19.0  200.0  261.0   16.0\n",
            "959311  273.0  236.0  261.0   89.0   15.0  236.0  297.0  -20.0\n",
            "959312  200.0  236.0  226.0   89.0  191.0  163.0  226.0  -57.0\n",
            "959313  200.0  200.0  156.0  126.0  191.0  200.0  191.0   52.0\n",
            "\n",
            "[1546099 rows x 8 columns]\n"
          ]
        }
      ],
      "source": [
        "# Left brain\n",
        "left_brain_df = final_df[['C3','T3','Fp1', 'F3', 'F7' , 'P3', 'T5','O1']]\n",
        "print(left_brain_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l7JvWW5gQW9s",
        "outputId": "ef8789ce-aa7e-47fe-83e7-a0475cde1814"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "           Fz    Fp1    Fp2     F3     F4     F7     F8\n",
            "0        85.0   85.0  347.0  310.0  384.0  -19.0  163.0\n",
            "1       121.0  156.0  384.0  494.0  273.0  -55.0  273.0\n",
            "2       191.0  297.0  384.0  568.0  273.0   85.0  347.0\n",
            "3       261.0  261.0  420.0  494.0  310.0   85.0  347.0\n",
            "4       191.0  367.0  310.0  494.0  273.0  156.0  310.0\n",
            "...       ...    ...    ...    ...    ...    ...    ...\n",
            "959309  261.0  191.0  200.0   52.0  310.0  191.0  236.0\n",
            "959310  261.0  226.0  200.0   52.0  273.0  -19.0  236.0\n",
            "959311  191.0  261.0  163.0   89.0  273.0   15.0  163.0\n",
            "959312  261.0  226.0  273.0   89.0  347.0  191.0  236.0\n",
            "959313   85.0  156.0  163.0  126.0  200.0  191.0  126.0\n",
            "\n",
            "[1546099 rows x 7 columns]\n"
          ]
        }
      ],
      "source": [
        "# F region\n",
        "F_df= final_df[['Fz', 'Fp1', 'Fp2', 'F3', 'F4','F7', 'F8']]\n",
        "print(F_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "epqicfynQeZn",
        "outputId": "e552da9f-e9c1-4dfc-8509-d92e651df870"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "           Cz     C3     C4\n",
            "0        16.0  163.0  310.0\n",
            "1        52.0  200.0  420.0\n",
            "2       236.0  200.0  568.0\n",
            "3       384.0   89.0  531.0\n",
            "4       568.0  163.0  531.0\n",
            "...       ...    ...    ...\n",
            "959309  200.0  200.0  126.0\n",
            "959310  163.0  273.0   89.0\n",
            "959311  200.0  273.0  126.0\n",
            "959312  200.0  200.0   89.0\n",
            "959313  126.0  200.0  126.0\n",
            "\n",
            "[1546099 rows x 3 columns]\n"
          ]
        }
      ],
      "source": [
        "# C region\n",
        "C_df= final_df[['Cz','C3','C4']]\n",
        "print(C_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JUat80vGQkHB",
        "outputId": "6af98a25-478f-4bb4-b98f-991322f4868f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "           Pz     P3     P4\n",
            "0       457.0  200.0   85.0\n",
            "1       420.0  273.0  121.0\n",
            "2       494.0  310.0  191.0\n",
            "3       568.0  310.0  261.0\n",
            "4       420.0  457.0  261.0\n",
            "...       ...    ...    ...\n",
            "959309  347.0  236.0  332.0\n",
            "959310  347.0  200.0  226.0\n",
            "959311  347.0  236.0  261.0\n",
            "959312  420.0  163.0  226.0\n",
            "959313  310.0  200.0  121.0\n",
            "\n",
            "[1546099 rows x 3 columns]\n"
          ]
        }
      ],
      "source": [
        "# P region\n",
        "P_df= final_df[['Pz','P3','P4']]\n",
        "print(P_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cvyuCyhmQqHJ",
        "outputId": "d890b5f7-903f-48ed-d464-d8e99c01dd7c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "           T3     T4     T5     T6\n",
            "0       457.0  568.0  121.0  163.0\n",
            "1       641.0  678.0  156.0   89.0\n",
            "2       678.0  715.0  297.0  126.0\n",
            "3       862.0  899.0  261.0  200.0\n",
            "4       788.0  678.0  297.0   89.0\n",
            "...       ...    ...    ...    ...\n",
            "959309  200.0  236.0  261.0  384.0\n",
            "959310  236.0  236.0  261.0  236.0\n",
            "959311  236.0  236.0  297.0  163.0\n",
            "959312  236.0  273.0  226.0  200.0\n",
            "959313  200.0  163.0  191.0  126.0\n",
            "\n",
            "[1546099 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "# T region\n",
        "T_df = final_df[['T3', 'T4', 'T5', 'T6']]\n",
        "print(T_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U6w_TPIZQwGQ",
        "outputId": "edff0e0c-493c-4329-ed46-79699cd3555e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "           O1     O2\n",
            "0        16.0  332.0\n",
            "1        52.0  367.0\n",
            "2        89.0  473.0\n",
            "3        16.0  578.0\n",
            "4       126.0  437.0\n",
            "...       ...    ...\n",
            "959309   89.0  156.0\n",
            "959310   16.0  121.0\n",
            "959311  -20.0  121.0\n",
            "959312  -57.0  156.0\n",
            "959313   52.0   50.0\n",
            "\n",
            "[1546099 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "# O region\n",
        "O_df = final_df[['O1', 'O2']]\n",
        "print(O_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cz</th>\n",
              "      <th>C3</th>\n",
              "      <th>C4</th>\n",
              "      <th>Fz</th>\n",
              "      <th>Fp1</th>\n",
              "      <th>Fp2</th>\n",
              "      <th>F3</th>\n",
              "      <th>F4</th>\n",
              "      <th>F7</th>\n",
              "      <th>F8</th>\n",
              "      <th>O1</th>\n",
              "      <th>O2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>384.0</td>\n",
              "      <td>-19.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>332.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>52.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>384.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>-55.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>367.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>236.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>297.0</td>\n",
              "      <td>384.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>473.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>384.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>531.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>578.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>568.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>531.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>367.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>437.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959309</th>\n",
              "      <td>200.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>156.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959310</th>\n",
              "      <td>163.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>-19.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>121.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959311</th>\n",
              "      <td>200.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>-20.0</td>\n",
              "      <td>121.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959312</th>\n",
              "      <td>200.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>-57.0</td>\n",
              "      <td>156.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959313</th>\n",
              "      <td>126.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1546099 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Cz     C3     C4     Fz    Fp1    Fp2     F3     F4     F7     F8  \\\n",
              "0        16.0  163.0  310.0   85.0   85.0  347.0  310.0  384.0  -19.0  163.0   \n",
              "1        52.0  200.0  420.0  121.0  156.0  384.0  494.0  273.0  -55.0  273.0   \n",
              "2       236.0  200.0  568.0  191.0  297.0  384.0  568.0  273.0   85.0  347.0   \n",
              "3       384.0   89.0  531.0  261.0  261.0  420.0  494.0  310.0   85.0  347.0   \n",
              "4       568.0  163.0  531.0  191.0  367.0  310.0  494.0  273.0  156.0  310.0   \n",
              "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
              "959309  200.0  200.0  126.0  261.0  191.0  200.0   52.0  310.0  191.0  236.0   \n",
              "959310  163.0  273.0   89.0  261.0  226.0  200.0   52.0  273.0  -19.0  236.0   \n",
              "959311  200.0  273.0  126.0  191.0  261.0  163.0   89.0  273.0   15.0  163.0   \n",
              "959312  200.0  200.0   89.0  261.0  226.0  273.0   89.0  347.0  191.0  236.0   \n",
              "959313  126.0  200.0  126.0   85.0  156.0  163.0  126.0  200.0  191.0  126.0   \n",
              "\n",
              "           O1     O2  \n",
              "0        16.0  332.0  \n",
              "1        52.0  367.0  \n",
              "2        89.0  473.0  \n",
              "3        16.0  578.0  \n",
              "4       126.0  437.0  \n",
              "...       ...    ...  \n",
              "959309   89.0  156.0  \n",
              "959310   16.0  121.0  \n",
              "959311  -20.0  121.0  \n",
              "959312  -57.0  156.0  \n",
              "959313   52.0   50.0  \n",
              "\n",
              "[1546099 rows x 12 columns]"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c_f_o_df = pd.concat([C_df, F_df, O_df], axis=1)\n",
        "c_f_o_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pz</th>\n",
              "      <th>P3</th>\n",
              "      <th>P4</th>\n",
              "      <th>T3</th>\n",
              "      <th>T4</th>\n",
              "      <th>T5</th>\n",
              "      <th>T6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>457.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>457.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>163.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>420.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>641.0</td>\n",
              "      <td>678.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>89.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>494.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>678.0</td>\n",
              "      <td>715.0</td>\n",
              "      <td>297.0</td>\n",
              "      <td>126.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>568.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>862.0</td>\n",
              "      <td>899.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>420.0</td>\n",
              "      <td>457.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>788.0</td>\n",
              "      <td>678.0</td>\n",
              "      <td>297.0</td>\n",
              "      <td>89.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      Pz     P3     P4     T3     T4     T5     T6\n",
              "0  457.0  200.0   85.0  457.0  568.0  121.0  163.0\n",
              "1  420.0  273.0  121.0  641.0  678.0  156.0   89.0\n",
              "2  494.0  310.0  191.0  678.0  715.0  297.0  126.0\n",
              "3  568.0  310.0  261.0  862.0  899.0  261.0  200.0\n",
              "4  420.0  457.0  261.0  788.0  678.0  297.0   89.0"
            ]
          },
          "execution_count": 65,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p_t_df = pd.concat([P_df, T_df], axis=1)\n",
        "p_t_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Fz</th>\n",
              "      <th>Fp1</th>\n",
              "      <th>Fp2</th>\n",
              "      <th>F3</th>\n",
              "      <th>F4</th>\n",
              "      <th>F7</th>\n",
              "      <th>F8</th>\n",
              "      <th>O1</th>\n",
              "      <th>O2</th>\n",
              "      <th>Pz</th>\n",
              "      <th>P3</th>\n",
              "      <th>P4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>85.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>384.0</td>\n",
              "      <td>-19.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>332.0</td>\n",
              "      <td>457.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>121.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>384.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>-55.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>367.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>121.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>191.0</td>\n",
              "      <td>297.0</td>\n",
              "      <td>384.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>473.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>191.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>261.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>578.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>261.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>191.0</td>\n",
              "      <td>367.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>437.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>457.0</td>\n",
              "      <td>261.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959309</th>\n",
              "      <td>261.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>332.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959310</th>\n",
              "      <td>261.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>-19.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>226.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959311</th>\n",
              "      <td>191.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>-20.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>261.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959312</th>\n",
              "      <td>261.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>-57.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>226.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959313</th>\n",
              "      <td>85.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>121.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1546099 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Fz    Fp1    Fp2     F3     F4     F7     F8     O1     O2     Pz  \\\n",
              "0        85.0   85.0  347.0  310.0  384.0  -19.0  163.0   16.0  332.0  457.0   \n",
              "1       121.0  156.0  384.0  494.0  273.0  -55.0  273.0   52.0  367.0  420.0   \n",
              "2       191.0  297.0  384.0  568.0  273.0   85.0  347.0   89.0  473.0  494.0   \n",
              "3       261.0  261.0  420.0  494.0  310.0   85.0  347.0   16.0  578.0  568.0   \n",
              "4       191.0  367.0  310.0  494.0  273.0  156.0  310.0  126.0  437.0  420.0   \n",
              "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
              "959309  261.0  191.0  200.0   52.0  310.0  191.0  236.0   89.0  156.0  347.0   \n",
              "959310  261.0  226.0  200.0   52.0  273.0  -19.0  236.0   16.0  121.0  347.0   \n",
              "959311  191.0  261.0  163.0   89.0  273.0   15.0  163.0  -20.0  121.0  347.0   \n",
              "959312  261.0  226.0  273.0   89.0  347.0  191.0  236.0  -57.0  156.0  420.0   \n",
              "959313   85.0  156.0  163.0  126.0  200.0  191.0  126.0   52.0   50.0  310.0   \n",
              "\n",
              "           P3     P4  \n",
              "0       200.0   85.0  \n",
              "1       273.0  121.0  \n",
              "2       310.0  191.0  \n",
              "3       310.0  261.0  \n",
              "4       457.0  261.0  \n",
              "...       ...    ...  \n",
              "959309  236.0  332.0  \n",
              "959310  200.0  226.0  \n",
              "959311  236.0  261.0  \n",
              "959312  163.0  226.0  \n",
              "959313  200.0  121.0  \n",
              "\n",
              "[1546099 rows x 12 columns]"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "f_o_p_df = pd.concat([F_df, O_df, P_df], axis=1)\n",
        "f_o_p_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cz</th>\n",
              "      <th>C3</th>\n",
              "      <th>C4</th>\n",
              "      <th>Pz</th>\n",
              "      <th>P3</th>\n",
              "      <th>P4</th>\n",
              "      <th>T3</th>\n",
              "      <th>T4</th>\n",
              "      <th>T5</th>\n",
              "      <th>T6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>457.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>457.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>163.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>52.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>641.0</td>\n",
              "      <td>678.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>89.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>236.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>494.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>678.0</td>\n",
              "      <td>715.0</td>\n",
              "      <td>297.0</td>\n",
              "      <td>126.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>384.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>531.0</td>\n",
              "      <td>568.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>862.0</td>\n",
              "      <td>899.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>568.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>531.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>457.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>788.0</td>\n",
              "      <td>678.0</td>\n",
              "      <td>297.0</td>\n",
              "      <td>89.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959309</th>\n",
              "      <td>200.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>332.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>384.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959310</th>\n",
              "      <td>163.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>236.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959311</th>\n",
              "      <td>200.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>261.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>297.0</td>\n",
              "      <td>163.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959312</th>\n",
              "      <td>200.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>420.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>959313</th>\n",
              "      <td>126.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>191.0</td>\n",
              "      <td>126.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1546099 rows × 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Cz     C3     C4     Pz     P3     P4     T3     T4     T5     T6\n",
              "0        16.0  163.0  310.0  457.0  200.0   85.0  457.0  568.0  121.0  163.0\n",
              "1        52.0  200.0  420.0  420.0  273.0  121.0  641.0  678.0  156.0   89.0\n",
              "2       236.0  200.0  568.0  494.0  310.0  191.0  678.0  715.0  297.0  126.0\n",
              "3       384.0   89.0  531.0  568.0  310.0  261.0  862.0  899.0  261.0  200.0\n",
              "4       568.0  163.0  531.0  420.0  457.0  261.0  788.0  678.0  297.0   89.0\n",
              "...       ...    ...    ...    ...    ...    ...    ...    ...    ...    ...\n",
              "959309  200.0  200.0  126.0  347.0  236.0  332.0  200.0  236.0  261.0  384.0\n",
              "959310  163.0  273.0   89.0  347.0  200.0  226.0  236.0  236.0  261.0  236.0\n",
              "959311  200.0  273.0  126.0  347.0  236.0  261.0  236.0  236.0  297.0  163.0\n",
              "959312  200.0  200.0   89.0  420.0  163.0  226.0  236.0  273.0  226.0  200.0\n",
              "959313  126.0  200.0  126.0  310.0  200.0  121.0  200.0  163.0  191.0  126.0\n",
              "\n",
              "[1546099 rows x 10 columns]"
            ]
          },
          "execution_count": 67,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c_p_t_df = pd.concat([C_df, P_df, T_df], axis=1)\n",
        "c_p_t_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {},
      "outputs": [],
      "source": [
        "# F_C_P_T_O\n",
        "\n",
        "FCPTO_df = final_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(1546099, 20)"
            ]
          },
          "execution_count": 69,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "FCPTO_df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Data Scale Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "id": "Ih2ssvMpPUPY"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "from sklearn.metrics import RocCurveDisplay\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import metrics\n",
        "from matplotlib import rcParams\n",
        "rcParams['figure.figsize'] = 20,10\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\n",
        "from sklearn.neural_network import MLPClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {},
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
        "\n",
        "scaler = MinMaxScaler()\n",
        "scale_data = FCPTO_df.drop(['class'], axis=1)\n",
        "scale_data = scaler.fit_transform(scale_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(1546099, 19)"
            ]
          },
          "execution_count": 79,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scale_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {},
      "outputs": [],
      "source": [
        "X = scale_data\n",
        "Y = FCPTO_df['class']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {},
      "outputs": [],
      "source": [
        "rf_model = RandomForestClassifier(random_state=0, n_estimators=100)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=0)\n",
        "rf_model.fit(X_train, y_train)\n",
        "y_pred = rf_model.predict(X_test)\n",
        "y_probs = rf_model.predict_proba(X_test)\n",
        "print(precision_recall_fscore_support(y_test, y_pred))\n",
        "\n",
        "print(f\"RandomForest Accuracy {(accuracy_score(y_test, y_pred))}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "ada_model = AdaBoostClassifier(random_state=0, n_estimators=100, base_estimator=DecisionTreeClassifier())\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=0)\n",
        "ada_model.fit(X_train, y_train)\n",
        "y_pred = ada_model.predict(X_test)\n",
        "y_probs = ada_model.predict_proba(X_test)\n",
        "print(precision_recall_fscore_support(y_test, y_pred))\n",
        "\n",
        "print(f\"Adaboost Accuracy {(accuracy_score(y_test, y_pred))}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Feature Selection Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "id": "SrjaXUs3yWGr"
      },
      "outputs": [],
      "source": [
        "final = final_df.drop(['class'], axis=1)\n",
        "Y = final_df['class']\n",
        "data_sets = [final, right_brain_df, left_brain_df, C_df, F_df, O_df, P_df, T_df, c_f_o_df, p_t_df, f_o_p_df, c_p_t_df]\n",
        "data_sets_labels = ['final_df', 'right_brain_df', 'left_brain_df', 'C_df', 'F_df', 'O_df', 'P_df', 'T_df', 'c_f_o_df', 'p_t_df', 'f_o_p_df', 'c_p_t_df']"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Neural Network Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "==== MLPClassifier Modeling of final_df dataset ====\n",
            "Accuracy: 0.8041653191902206\n",
            "==== MLPClassifier Modeling of right_brain_df dataset ====\n",
            "Accuracy: 0.7270357674147856\n",
            "==== MLPClassifier Modeling of left_brain_df dataset ====\n",
            "Accuracy: 0.6888396610827243\n",
            "==== MLPClassifier Modeling of C_df dataset ====\n",
            "Accuracy: 0.6455112864627126\n",
            "==== MLPClassifier Modeling of F_df dataset ====\n",
            "Accuracy: 0.6711241187504042\n",
            "==== MLPClassifier Modeling of O_df dataset ====\n",
            "Accuracy: 0.6208136601772201\n",
            "==== MLPClassifier Modeling of P_df dataset ====\n",
            "Accuracy: 0.6530754802406054\n",
            "==== MLPClassifier Modeling of T_df dataset ====\n",
            "Accuracy: 0.6628322876916112\n",
            "==== MLPClassifier Modeling of c_f_o_df dataset ====\n",
            "Accuracy: 0.7254317314533342\n",
            "==== MLPClassifier Modeling of p_t_df dataset ====\n",
            "Accuracy: 0.7015684625832741\n",
            "==== MLPClassifier Modeling of f_o_p_df dataset ====\n",
            "Accuracy: 0.74704740961128\n",
            "==== MLPClassifier Modeling of c_p_t_df dataset ====\n",
            "Accuracy: 0.7230547830023931\n"
          ]
        }
      ],
      "source": [
        "classification_report_nn = []\n",
        "\n",
        "nn_model = MLPClassifier()\n",
        "\n",
        "for label, data_set in zip(data_sets_labels, data_sets):\n",
        "  print(f\"==== MLPClassifier Modeling of {label} dataset ====\")\n",
        "  y_pred=[]\n",
        "  y_probs=[]\n",
        "  X_train, X_test, y_train, y_test = train_test_split(data_set, Y, test_size=0.20, random_state=0)\n",
        "  nn_model.fit(X_train, y_train)\n",
        "  y_pred = nn_model.predict(X_test)\n",
        "  y_probs = nn_model.predict_proba(X_test)\n",
        "  cc = []\n",
        "  cc = precision_recall_fscore_support(y_test, y_pred)\n",
        "  # print(cc)\n",
        "  acc = accuracy_score(y_test, y_pred)\n",
        "  print(f\"Accuracy: {acc}\")\n",
        "  classification_report_nn.append({'precision_class0_'+label: cc[0][0],\n",
        "                                 'precision_class1_'+label: cc[0][1],\n",
        "                                 'recall_class0_'+label: cc[1][0],\n",
        "                                 'recall_class1_'+label: cc[1][1], \n",
        "                                 'f1-score_class0_'+label: cc[2][0],\n",
        "                                 'f1-score_class1_'+label: cc[2][1],\n",
        "                                 'Accuracy_'+label: acc\n",
        "                              })\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {},
      "outputs": [],
      "source": [
        "vals_nn = []\n",
        "for index in range(len(classification_report_nn)):\n",
        "    for key in classification_report_nn[index]:\n",
        "        vals_nn.append(round(classification_report_nn[index][key]*100, 2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### RandomForest Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "mZgAJgary0Ql",
        "outputId": "cb8175e2-b33e-4298-e68b-e610b586f700"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "==== RandomForestClassifier Modeling of final_df dataset ====\n",
            "Accuracy: 0.8047765345061768\n",
            "==== RandomForestClassifier Modeling of right_brain_df dataset ====\n",
            "Accuracy: 0.7234816635405213\n",
            "==== RandomForestClassifier Modeling of left_brain_df dataset ====\n",
            "Accuracy: 0.6872711984994502\n",
            "==== RandomForestClassifier Modeling of C_df dataset ====\n",
            "Accuracy: 0.6469665610245133\n",
            "==== RandomForestClassifier Modeling of F_df dataset ====\n",
            "Accuracy: 0.6591617618524028\n",
            "==== RandomForestClassifier Modeling of O_df dataset ====\n",
            "Accuracy: 0.6202929952784425\n",
            "==== RandomForestClassifier Modeling of P_df dataset ====\n",
            "Accuracy: 0.6526485997024772\n",
            "==== RandomForestClassifier Modeling of T_df dataset ====\n",
            "Accuracy: 0.6453948644977686\n",
            "==== RandomForestClassifier Modeling of c_f_o_df dataset ====\n",
            "Accuracy: 0.7363527585537805\n",
            "==== RandomForestClassifier Modeling of p_t_df dataset ====\n",
            "Accuracy: 0.688988422482375\n",
            "==== RandomForestClassifier Modeling of f_o_p_df dataset ====\n",
            "Accuracy: 0.7571955242222366\n",
            "==== RandomForestClassifier Modeling of c_p_t_df dataset ====\n",
            "Accuracy: 0.7368798913394994\n"
          ]
        }
      ],
      "source": [
        "classification_report_ = []\n",
        "\n",
        "rf_model = RandomForestClassifier(random_state=0, n_estimators=100)\n",
        "for label, data_set in zip(data_sets_labels, data_sets):\n",
        "  print(f\"==== RandomForestClassifier Modeling of {label} dataset ====\")\n",
        "  y_pred=[]\n",
        "  y_probs=[]\n",
        "  X_train, X_test, y_train, y_test = train_test_split(data_set, Y, test_size=0.20, random_state=0)\n",
        "  rf_model.fit(X_train, y_train)\n",
        "  y_pred = rf_model.predict(X_test)\n",
        "  y_probs = rf_model.predict_proba(X_test)\n",
        "  cc = []\n",
        "  cc = precision_recall_fscore_support(y_test, y_pred)\n",
        "  # print(cc)\n",
        "  acc = accuracy_score(y_test, y_pred)\n",
        "  print(f\"Accuracy: {acc}\")\n",
        "  classification_report_.append({ 'precision_class0_'+label: cc[0][0],\n",
        "                                 'precision_class1_'+label: cc[0][1],\n",
        "                                 'recall_class0_'+label: cc[1][0],\n",
        "                                 'recall_class1_'+label: cc[1][1], \n",
        "                                 'f1-score_class0_'+label: cc[2][0],\n",
        "                                 'f1-score_class1_'+label: cc[2][1],\n",
        "                                 'Accuracy_'+label: acc\n",
        "                              })\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "id": "ScDFgp2cQRLH"
      },
      "outputs": [],
      "source": [
        "# Seprating Row labels and values\n",
        "row_index = []\n",
        "vals = []\n",
        "for index in range(len(classification_report_)):\n",
        "    for key in classification_report_[index]:\n",
        "        row_index.append(key)\n",
        "        vals.append(round(classification_report_[index][key]*100, 2))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### AdaBoost Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 91,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "==== AdaBoostClassifier Modeling of final_df dataset ====\n",
            "Accuracy: 0.6968436711726279\n",
            "==== AdaBoostClassifier Modeling of right_brain_df dataset ====\n",
            "Accuracy: 0.6938619752926719\n",
            "==== AdaBoostClassifier Modeling of left_brain_df dataset ====\n",
            "Accuracy: 0.6609113252700343\n",
            "==== AdaBoostClassifier Modeling of C_df dataset ====\n",
            "Accuracy: 0.6459316991138995\n",
            "==== AdaBoostClassifier Modeling of F_df dataset ====\n",
            "Accuracy: 0.6313983571567169\n",
            "==== AdaBoostClassifier Modeling of O_df dataset ====\n",
            "Accuracy: 0.6202444861263825\n",
            "==== AdaBoostClassifier Modeling of P_df dataset ====\n",
            "Accuracy: 0.6521020632559343\n",
            "==== AdaBoostClassifier Modeling of T_df dataset ====\n",
            "Accuracy: 0.6430825949162409\n",
            "==== AdaBoostClassifier Modeling of c_f_o_df dataset ====\n",
            "Accuracy: 0.7138930211499903\n",
            "==== AdaBoostClassifier Modeling of p_t_df dataset ====\n",
            "Accuracy: 0.6625250630618976\n",
            "==== AdaBoostClassifier Modeling of f_o_p_df dataset ====\n",
            "Accuracy: 0.6672595563029559\n",
            "==== AdaBoostClassifier Modeling of c_p_t_df dataset ====\n",
            "Accuracy: 0.7095466011254123\n"
          ]
        }
      ],
      "source": [
        "classification_report_ada = []\n",
        "\n",
        "ada_model = AdaBoostClassifier(random_state=0, n_estimators=100, base_estimator=DecisionTreeClassifier())\n",
        "for label, data_set in zip(data_sets_labels, data_sets):\n",
        "  print(f\"==== AdaBoostClassifier Modeling of {label} dataset ====\")\n",
        "  y_pred=[]\n",
        "  y_probs=[]\n",
        "  X_train, X_test, y_train, y_test = train_test_split(data_set, Y, test_size=0.20, random_state=0)\n",
        "  ada_model.fit(X_train, y_train)\n",
        "  y_pred = ada_model.predict(X_test)\n",
        "  y_probs = ada_model.predict_proba(X_test)\n",
        "  cc = []\n",
        "  cc = precision_recall_fscore_support(y_test, y_pred)\n",
        "  # print(cc)\n",
        "  acc = accuracy_score(y_test, y_pred)\n",
        "  print(f\"Accuracy: {acc}\")\n",
        "  classification_report_ada.append({ 'precision_class0_'+label: cc[0][0],\n",
        "                                 'precision_class1_'+label: cc[0][1],\n",
        "                                 'recall_class0_'+label: cc[1][0],\n",
        "                                 'recall_class1_'+label: cc[1][1], \n",
        "                                 'f1-score_class0_'+label: cc[2][0],\n",
        "                                 'f1-score_class1_'+label: cc[2][1],\n",
        "                                 'Accuracy_'+label: acc\n",
        "                              })"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 92,
      "metadata": {},
      "outputs": [],
      "source": [
        "vals_ada = []\n",
        "for index in range(len(classification_report_ada)):\n",
        "    for key in classification_report_ada[index]:\n",
        "        vals_ada.append(round(classification_report_ada[index][key]*100, 2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 93,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                                 RandomForest  AdaBoost     NN\n",
            "precision_class0_final_df               82.92     75.86  85.65\n",
            "precision_class1_final_df               76.01     59.85  72.69\n",
            "recall_class0_final_df                  86.34     75.06  82.24\n",
            "recall_class1_final_df                  70.87     60.89  77.43\n",
            "f1-score_class0_final_df                84.60     75.46  83.91\n",
            "f1-score_class1_final_df                73.35     60.36  74.99\n",
            "Accuracy_final_df                       80.48     69.68  80.42\n",
            "precision_class0_right_brain_df         76.12     74.62  77.73\n",
            "precision_class1_right_brain_df         65.06     60.12  64.24\n",
            "recall_class0_right_brain_df            80.82     76.82  78.53\n",
            "recall_class1_right_brain_df            58.47     57.21  63.17\n",
            "f1-score_class0_right_brain_df          78.40     75.71  78.13\n",
            "f1-score_class1_right_brain_df          61.59     58.63  63.70\n",
            "Accuracy_right_brain_df                 72.35     69.39  72.70\n",
            "precision_class0_left_brain_df          72.43     71.56  72.31\n",
            "precision_class1_left_brain_df          60.61     55.78  61.11\n",
            "recall_class0_left_brain_df             80.14     75.32  80.83\n",
            "recall_class1_left_brain_df             50.03     50.98  49.32\n",
            "f1-score_class0_left_brain_df           76.09     73.39  76.34\n",
            "f1-score_class1_left_brain_df           54.81     53.27  54.58\n",
            "Accuracy_left_brain_df                  68.73     66.09  68.88\n",
            "precision_class0_C_df                   68.20     68.14  68.27\n",
            "precision_class1_C_df                   54.94     54.74  54.55\n",
            "recall_class0_C_df                      80.82     80.72  80.16\n",
            "recall_class1_C_df                      38.29     38.18  38.99\n",
            "f1-score_class0_C_df                    73.98     73.90  73.74\n",
            "f1-score_class1_C_df                    45.13     44.98  45.47\n",
            "Accuracy_C_df                           64.70     64.59  64.55\n",
            "precision_class0_F_df                   70.07     69.42  72.16\n",
            "precision_class1_F_df                   56.33     51.50  57.37\n",
            "recall_class0_F_df                      78.74     72.62  76.58\n",
            "recall_class1_F_df                      44.91     47.61  51.61\n",
            "f1-score_class0_F_df                    74.15     70.98  74.30\n",
            "f1-score_class1_F_df                    49.98     49.48  54.33\n",
            "Accuracy_F_df                           65.92     63.14  67.11\n",
            "precision_class0_O_df                   62.52     62.52  62.58\n",
            "precision_class1_O_df                   49.22     49.15  49.93\n",
            "recall_class0_O_df                      96.95     96.97  96.82\n",
            "recall_class1_O_df                       4.83      4.80   5.19\n",
            "f1-score_class0_O_df                    76.02     76.02  76.02\n",
            "f1-score_class1_O_df                     8.80      8.74   9.40\n",
            "Accuracy_O_df                           62.03     62.02  62.08\n",
            "precision_class0_P_df                   70.26     70.27  68.02\n",
            "precision_class1_P_df                   54.89     54.78  56.71\n",
            "recall_class0_P_df                      76.40     76.22  83.28\n",
            "recall_class1_P_df                      47.03     47.18  35.87\n",
            "f1-score_class0_P_df                    73.20     73.12  74.88\n",
            "f1-score_class1_P_df                    50.66     50.70  43.95\n",
            "Accuracy_P_df                           65.26     65.21  65.31\n",
            "precision_class0_T_df                   71.17     70.70  70.34\n",
            "precision_class1_T_df                   53.30     53.06  56.93\n",
            "recall_class0_T_df                      72.09     72.61  79.00\n",
            "recall_class1_T_df                      52.17     50.71  45.46\n",
            "f1-score_class0_T_df                    71.63     71.64  74.42\n",
            "f1-score_class1_T_df                    52.73     51.86  50.55\n",
            "Accuracy_T_df                           64.54     64.31  66.28\n",
            "precision_class0_c_f_o_df               76.38     75.29  76.93\n",
            "precision_class1_c_f_o_df               67.87     63.75  64.64\n",
            "recall_class0_c_f_o_df                  83.28     80.26  79.67\n",
            "recall_class1_c_f_o_df                  57.83     56.86  60.88\n",
            "f1-score_class0_c_f_o_df                79.69     77.70  78.27\n",
            "f1-score_class1_c_f_o_df                62.45     60.11  62.70\n",
            "Accuracy_c_f_o_df                       73.64     71.39  72.54\n",
            "precision_class0_p_t_df                 73.26     72.10  75.35\n",
            "precision_class1_p_t_df                 60.20     55.80  61.08\n",
            "recall_class0_p_t_df                    78.59     74.45  77.18\n",
            "recall_class1_p_t_df                    53.03     52.82  58.66\n",
            "f1-score_class0_p_t_df                  75.83     73.26  76.25\n",
            "f1-score_class1_p_t_df                  56.39     54.27  59.85\n",
            "Accuracy_p_t_df                         68.90     66.25  70.16\n",
            "precision_class0_f_o_p_df               79.06     73.43  80.04\n",
            "precision_class1_f_o_p_df               69.50     56.02  66.27\n",
            "recall_class0_f_o_p_df                  82.83     72.73  78.94\n",
            "recall_class1_f_o_p_df                  64.08     56.90  67.76\n",
            "f1-score_class0_f_o_p_df                80.90     73.08  79.49\n",
            "f1-score_class1_f_o_p_df                66.68     56.46  67.01\n",
            "Accuracy_f_o_p_df                       75.72     66.73  74.70\n",
            "precision_class0_c_p_t_df               77.31     75.74  79.40\n",
            "precision_class1_c_p_t_df               66.81     62.38  62.31\n",
            "recall_class0_c_p_t_df                  81.56     78.31  74.80\n",
            "recall_class1_c_p_t_df                  60.80     58.91  68.23\n",
            "f1-score_class0_c_p_t_df                79.38     77.00  77.03\n",
            "f1-score_class1_c_p_t_df                63.66     60.60  65.13\n",
            "Accuracy_c_p_t_df                       73.69     70.95  72.31\n"
          ]
        }
      ],
      "source": [
        "output_df = pd.DataFrame({\"RandomForest\": vals, \"AdaBoost\": vals_ada, \"NN\": vals_nn}, index=row_index)\n",
        "print(output_df, flush=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {},
      "outputs": [],
      "source": [
        "output_df.to_csv('results.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Defaulting to user installation because normal site-packages is not writeable\n",
            "Collecting pyarrow\n",
            "  Downloading pyarrow-12.0.1-cp39-cp39-macosx_11_0_arm64.whl (22.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m22.7/22.7 MB\u001b[0m \u001b[31m39.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.16.6 in /Users/jagdanda/Library/Python/3.9/lib/python/site-packages (from pyarrow) (1.23.3)\n",
            "Installing collected packages: pyarrow\n",
            "Successfully installed pyarrow-12.0.1\n",
            "\n",
            "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip available: \u001b[0m\u001b[31;49m22.3.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m23.1.2\u001b[0m\n",
            "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49m/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip\u001b[0m\n"
          ]
        }
      ],
      "source": [
        "!pip3 install pyarrow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {},
      "outputs": [],
      "source": [
        "df = pd.read_parquet('/Users/jagdanda/Documents/DataLakeTeam/repos/cxdl-sonoma-incremental-dcn-assets/src/python/sonoma/aws/test_data/DeviceRegistrations.parquet')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['_hoodie_commit_time', '_hoodie_commit_seqno', '_hoodie_record_key',\n",
              "       '_hoodie_partition_path', '_hoodie_file_name', 'AccessKey', 'Account',\n",
              "       'AccountMoid', 'Ancestors', 'ApiVersion', 'AppPartitionNumber',\n",
              "       'ClaimedByUser', 'ClaimedTime', 'ClassId', 'ClusterMembers',\n",
              "       'ConnectionId', 'ConnectionReason', 'ConnectionStatus',\n",
              "       'ConnectionStatusLastChangeTime', 'ConnectorVersion', 'CreateTime',\n",
              "       'DeviceClaim', 'DeviceConfiguration', 'DeviceExternalIpAddress',\n",
              "       'DeviceHostname', 'DeviceIpAddress', 'DomainGroup', 'DomainGroupMoid',\n",
              "       'ExecutionMode', 'ModTime', 'Moid', 'ObjectType', 'Owners', 'Parent',\n",
              "       'ParentConnection', 'ParentSignature', 'PermissionResources', 'Pid',\n",
              "       'PlatformType', 'ProxyApp', 'PublicAccessKey', 'PublicKeyUpgraded',\n",
              "       'ReadOnly', 'SecurityToken', 'Serial', 'SharedOrgInfoHolder',\n",
              "       'SharedScope', 'Tags', 'Vendor', 'is_deleted'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Serial</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[JPG252500CW]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[JPG252500CW]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[JPG252500CW]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[JPG252500CW]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[JPG252500CW]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134141</th>\n",
              "      <td>[FCH24207CJ7]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134142</th>\n",
              "      <td>[WZP230407GK]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134143</th>\n",
              "      <td>[FDO241415XC, FDO241415NN]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134144</th>\n",
              "      <td>[FCH26167MVE]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134145</th>\n",
              "      <td>[FDO25131DTX, FDO25131DTQ]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>134146 rows × 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                            Serial\n",
              "0                    [JPG252500CW]\n",
              "1                    [JPG252500CW]\n",
              "2                    [JPG252500CW]\n",
              "3                    [JPG252500CW]\n",
              "4                    [JPG252500CW]\n",
              "...                            ...\n",
              "134141               [FCH24207CJ7]\n",
              "134142               [WZP230407GK]\n",
              "134143  [FDO241415XC, FDO241415NN]\n",
              "134144               [FCH26167MVE]\n",
              "134145  [FDO25131DTX, FDO25131DTQ]\n",
              "\n",
              "[134146 rows x 1 columns]"
            ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.set_option('display.max_rows', 1000)\n",
        "df[[\"Serial\"]]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [],
      "source": [
        "# pd.set_option('display.max_rows', 2000)\n",
        "# display(df[[\"RecordType\", \"DeviceType\"]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [],
      "source": [
        "filtered_df = df[(df['RecordType'] != 'APIC') & (df['DeviceType'] == 'controller')]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "79      FCH2031V171\n",
              "80      FCH2031V0PS\n",
              "81      FCH2031V15W\n",
              "122     FCH2031V171\n",
              "123     FCH2031V0PS\n",
              "124     FCH2031V15W\n",
              "209     FCH2031V171\n",
              "210     FCH2031V0PS\n",
              "214     FCH2031V15W\n",
              "242    0050568EAB41\n",
              "281     WMP243800AG\n",
              "285     WMP243800AZ\n",
              "286     WMP243800AX\n",
              "350    0050568EAB41\n",
              "358    0050568EAB41\n",
              "532     FCH1748V0QB\n",
              "539     FCH2030V1TG\n",
              "540     FCH2031V16Z\n",
              "Name: Serial, dtype: object"
            ]
          },
          "execution_count": 41,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "filtered_df.Serial "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "lzlqFDBvdnzO",
        "cxjKy4XXgWjn",
        "pAfNKZjGeIoF",
        "4Qpn1ubMfeMw"
      ],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3.9.6 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    },
    "vscode": {
      "interpreter": {
        "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
